// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: flow.proto

package pb

import (
	pb "github.com/netsampler/goflow2/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// modify/anonymize
type EnrichedFlow_AnonymizedType int32

const (
	EnrichedFlow_NotAnonymized EnrichedFlow_AnonymizedType = 0
	EnrichedFlow_CryptoPAN     EnrichedFlow_AnonymizedType = 1
)

// Enum value maps for EnrichedFlow_AnonymizedType.
var (
	EnrichedFlow_AnonymizedType_name = map[int32]string{
		0: "NotAnonymized",
		1: "CryptoPAN",
	}
	EnrichedFlow_AnonymizedType_value = map[string]int32{
		"NotAnonymized": 0,
		"CryptoPAN":     1,
	}
)

func (x EnrichedFlow_AnonymizedType) Enum() *EnrichedFlow_AnonymizedType {
	p := new(EnrichedFlow_AnonymizedType)
	*p = x
	return p
}

func (x EnrichedFlow_AnonymizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_AnonymizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[0].Descriptor()
}

func (EnrichedFlow_AnonymizedType) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[0]
}

func (x EnrichedFlow_AnonymizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_AnonymizedType.Descriptor instead.
func (EnrichedFlow_AnonymizedType) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0, 0}
}

// modify/normalize
type EnrichedFlow_NormalizedType int32

const (
	EnrichedFlow_No  EnrichedFlow_NormalizedType = 0
	EnrichedFlow_Yes EnrichedFlow_NormalizedType = 1
)

// Enum value maps for EnrichedFlow_NormalizedType.
var (
	EnrichedFlow_NormalizedType_name = map[int32]string{
		0: "No",
		1: "Yes",
	}
	EnrichedFlow_NormalizedType_value = map[string]int32{
		"No":  0,
		"Yes": 1,
	}
)

func (x EnrichedFlow_NormalizedType) Enum() *EnrichedFlow_NormalizedType {
	p := new(EnrichedFlow_NormalizedType)
	*p = x
	return p
}

func (x EnrichedFlow_NormalizedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_NormalizedType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[1].Descriptor()
}

func (EnrichedFlow_NormalizedType) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[1]
}

func (x EnrichedFlow_NormalizedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_NormalizedType.Descriptor instead.
func (EnrichedFlow_NormalizedType) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0, 1}
}

// modify/remoteaddress
type EnrichedFlow_RemoteAddrType int32

const (
	EnrichedFlow_Neither EnrichedFlow_RemoteAddrType = 0
	EnrichedFlow_Src     EnrichedFlow_RemoteAddrType = 1
	EnrichedFlow_Dst     EnrichedFlow_RemoteAddrType = 2
)

// Enum value maps for EnrichedFlow_RemoteAddrType.
var (
	EnrichedFlow_RemoteAddrType_name = map[int32]string{
		0: "Neither",
		1: "Src",
		2: "Dst",
	}
	EnrichedFlow_RemoteAddrType_value = map[string]int32{
		"Neither": 0,
		"Src":     1,
		"Dst":     2,
	}
)

func (x EnrichedFlow_RemoteAddrType) Enum() *EnrichedFlow_RemoteAddrType {
	p := new(EnrichedFlow_RemoteAddrType)
	*p = x
	return p
}

func (x EnrichedFlow_RemoteAddrType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnrichedFlow_RemoteAddrType) Descriptor() protoreflect.EnumDescriptor {
	return file_flow_proto_enumTypes[2].Descriptor()
}

func (EnrichedFlow_RemoteAddrType) Type() protoreflect.EnumType {
	return &file_flow_proto_enumTypes[2]
}

func (x EnrichedFlow_RemoteAddrType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnrichedFlow_RemoteAddrType.Descriptor instead.
func (EnrichedFlow_RemoteAddrType) EnumDescriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0, 2}
}

type EnrichedFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Core              *pb.FlowMessage `protobuf:"bytes,1,opt,name=Core,proto3" json:"Core,omitempty"`
	PacketBytesMin    uint32          `protobuf:"varint,1100,opt,name=PacketBytesMin,proto3" json:"PacketBytesMin,omitempty"`       // new, single packet means uint32 < MTU
	PacketBytesMax    uint32          `protobuf:"varint,1101,opt,name=PacketBytesMax,proto3" json:"PacketBytesMax,omitempty"`       // new
	PacketBytesMean   uint32          `protobuf:"varint,1102,opt,name=PacketBytesMean,proto3" json:"PacketBytesMean,omitempty"`     // new
	PacketBytesStdDev uint32          `protobuf:"varint,1103,opt,name=PacketBytesStdDev,proto3" json:"PacketBytesStdDev,omitempty"` // new
	PacketIATMin      uint64          `protobuf:"varint,1110,opt,name=PacketIATMin,proto3" json:"PacketIATMin,omitempty"`           // new
	PacketIATMax      uint64          `protobuf:"varint,1111,opt,name=PacketIATMax,proto3" json:"PacketIATMax,omitempty"`           // new
	PacketIATMean     uint64          `protobuf:"varint,1112,opt,name=PacketIATMean,proto3" json:"PacketIATMean,omitempty"`         // new
	PacketIATStdDev   uint64          `protobuf:"varint,1113,opt,name=PacketIATStdDev,proto3" json:"PacketIATStdDev,omitempty"`     // new
	HeaderBytes       uint32          `protobuf:"varint,1120,opt,name=HeaderBytes,proto3" json:"HeaderBytes,omitempty"`             // new
	FINFlagCount      uint64          `protobuf:"varint,1130,opt,name=FINFlagCount,proto3" json:"FINFlagCount,omitempty"`           // new
	SYNFlagCount      uint64          `protobuf:"varint,1131,opt,name=SYNFlagCount,proto3" json:"SYNFlagCount,omitempty"`           // new
	RSTFlagCount      uint64          `protobuf:"varint,1132,opt,name=RSTFlagCount,proto3" json:"RSTFlagCount,omitempty"`           // new
	PSHFlagCount      uint64          `protobuf:"varint,1133,opt,name=PSHFlagCount,proto3" json:"PSHFlagCount,omitempty"`           // new
	ACKFlagCount      uint64          `protobuf:"varint,1134,opt,name=ACKFlagCount,proto3" json:"ACKFlagCount,omitempty"`           // new
	URGFlagCount      uint64          `protobuf:"varint,1135,opt,name=URGFlagCount,proto3" json:"URGFlagCount,omitempty"`           // new
	CWRFlagCount      uint64          `protobuf:"varint,1136,opt,name=CWRFlagCount,proto3" json:"CWRFlagCount,omitempty"`           // new
	ECEFlagCount      uint64          `protobuf:"varint,1137,opt,name=ECEFlagCount,proto3" json:"ECEFlagCount,omitempty"`           // new
	PayloadPackets    uint64          `protobuf:"varint,1140,opt,name=PayloadPackets,proto3" json:"PayloadPackets,omitempty"`       // new
	TimeActiveMin     uint64          `protobuf:"varint,1150,opt,name=TimeActiveMin,proto3" json:"TimeActiveMin,omitempty"`         // new
	TimeActiveMax     uint64          `protobuf:"varint,1151,opt,name=TimeActiveMax,proto3" json:"TimeActiveMax,omitempty"`         // new
	TimeActiveMean    uint64          `protobuf:"varint,1152,opt,name=TimeActiveMean,proto3" json:"TimeActiveMean,omitempty"`       // new
	TimeActiveStdDev  uint64          `protobuf:"varint,1153,opt,name=TimeActiveStdDev,proto3" json:"TimeActiveStdDev,omitempty"`   // new
	TimeIdleMin       uint64          `protobuf:"varint,1154,opt,name=TimeIdleMin,proto3" json:"TimeIdleMin,omitempty"`             // new
	TimeIdleMax       uint64          `protobuf:"varint,1155,opt,name=TimeIdleMax,proto3" json:"TimeIdleMax,omitempty"`             // new
	TimeIdleMean      uint64          `protobuf:"varint,1156,opt,name=TimeIdleMean,proto3" json:"TimeIdleMean,omitempty"`           // new
	TimeIdleStdDev    uint64          `protobuf:"varint,1157,opt,name=TimeIdleStdDev,proto3" json:"TimeIdleStdDev,omitempty"`       // new
	// modify/addcid
	Cid                               uint32                      `protobuf:"varint,1000,opt,name=Cid,proto3" json:"Cid,omitempty"`            // TODO: deprecate and provide as helper?
	CidString                         string                      `protobuf:"bytes,1001,opt,name=CidString,proto3" json:"CidString,omitempty"` // deprecated, delete for v1.0.0
	SrcCid                            uint32                      `protobuf:"varint,1012,opt,name=SrcCid,proto3" json:"SrcCid,omitempty"`
	DstCid                            uint32                      `protobuf:"varint,1013,opt,name=DstCid,proto3" json:"DstCid,omitempty"`
	SrcAddrAnon                       EnrichedFlow_AnonymizedType `protobuf:"varint,1160,opt,name=SrcAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"SrcAddrAnon,omitempty"`         // new
	DstAddrAnon                       EnrichedFlow_AnonymizedType `protobuf:"varint,1161,opt,name=DstAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"DstAddrAnon,omitempty"`         // new
	PreservedPrefixLen                uint32                      `protobuf:"varint,1162,opt,name=PreservedPrefixLen,proto3" json:"PreservedPrefixLen,omitempty"`                                   // new
	SamplerAddrAnon                   EnrichedFlow_AnonymizedType `protobuf:"varint,1163,opt,name=SamplerAddrAnon,proto3,enum=flowpb.EnrichedFlow_AnonymizedType" json:"SamplerAddrAnon,omitempty"` // TODO: needed?
	SamplerAddrAnonPreservedPrefixLen uint32                      `protobuf:"varint,1164,opt,name=SamplerAddrAnonPreservedPrefixLen,proto3" json:"SamplerAddrAnonPreservedPrefixLen,omitempty"`     // TODO: afi for src/dst is always the same, but sampler can differ... we need this too then?
	// modify/bgp
	SrcASPath []uint32 `protobuf:"varint,1170,rep,packed,name=SrcASPath,proto3" json:"SrcASPath,omitempty"` // new
	DstASPath []uint32 `protobuf:"varint,1171,rep,packed,name=DstASPath,proto3" json:"DstASPath,omitempty"` // new
	// modify/geolocation
	RemoteCountry string                      `protobuf:"bytes,1010,opt,name=RemoteCountry,proto3" json:"RemoteCountry,omitempty"` // TODO: deprecate and provide as helper
	SrcCountry    string                      `protobuf:"bytes,1014,opt,name=SrcCountry,proto3" json:"SrcCountry,omitempty"`
	DstCountry    string                      `protobuf:"bytes,1015,opt,name=DstCountry,proto3" json:"DstCountry,omitempty"`
	Normalized    EnrichedFlow_NormalizedType `protobuf:"varint,1002,opt,name=Normalized,proto3,enum=flowpb.EnrichedFlow_NormalizedType" json:"Normalized,omitempty"` // TODO: deprecate and replace with helper?
	// modify/protomap
	ProtoName  string                      `protobuf:"bytes,1009,opt,name=ProtoName,proto3" json:"ProtoName,omitempty"`                                            // TODO: deprecate and replace with helper, why lug a string along...
	RemoteAddr EnrichedFlow_RemoteAddrType `protobuf:"varint,1011,opt,name=RemoteAddr,proto3,enum=flowpb.EnrichedFlow_RemoteAddrType" json:"RemoteAddr,omitempty"` // TODO: figure out a better system? applicable only to service providers right now...
	// modify/reversedns
	SrcAddrName string `protobuf:"bytes,1180,opt,name=SrcAddrName,proto3" json:"SrcAddrName,omitempty"` // new
	DstAddrName string `protobuf:"bytes,1181,opt,name=DstAddrName,proto3" json:"DstAddrName,omitempty"` // new
	// modify/snmp
	SrcIfName  string `protobuf:"bytes,1003,opt,name=SrcIfName,proto3" json:"SrcIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfDesc  string `protobuf:"bytes,1004,opt,name=SrcIfDesc,proto3" json:"SrcIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	SrcIfSpeed uint32 `protobuf:"varint,1005,opt,name=SrcIfSpeed,proto3" json:"SrcIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	DstIfName  string `protobuf:"bytes,1006,opt,name=DstIfName,proto3" json:"DstIfName,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfDesc  string `protobuf:"bytes,1007,opt,name=DstIfDesc,proto3" json:"DstIfDesc,omitempty"`    // TODO: rename to match InIf and OutIf
	DstIfSpeed uint32 `protobuf:"varint,1008,opt,name=DstIfSpeed,proto3" json:"DstIfSpeed,omitempty"` // TODO: rename to match InIf and OutIf
	// general
	Note string `protobuf:"bytes,1016,opt,name=Note,proto3" json:"Note,omitempty"` // free-form field to implement anything
}

func (x *EnrichedFlow) Reset() {
	*x = EnrichedFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrichedFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrichedFlow) ProtoMessage() {}

func (x *EnrichedFlow) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrichedFlow.ProtoReflect.Descriptor instead.
func (*EnrichedFlow) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

func (x *EnrichedFlow) GetCore() *pb.FlowMessage {
	if x != nil {
		return x.Core
	}
	return nil
}

func (x *EnrichedFlow) GetPacketBytesMin() uint32 {
	if x != nil {
		return x.PacketBytesMin
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesMax() uint32 {
	if x != nil {
		return x.PacketBytesMax
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesMean() uint32 {
	if x != nil {
		return x.PacketBytesMean
	}
	return 0
}

func (x *EnrichedFlow) GetPacketBytesStdDev() uint32 {
	if x != nil {
		return x.PacketBytesStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMin() uint64 {
	if x != nil {
		return x.PacketIATMin
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMax() uint64 {
	if x != nil {
		return x.PacketIATMax
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATMean() uint64 {
	if x != nil {
		return x.PacketIATMean
	}
	return 0
}

func (x *EnrichedFlow) GetPacketIATStdDev() uint64 {
	if x != nil {
		return x.PacketIATStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetHeaderBytes() uint32 {
	if x != nil {
		return x.HeaderBytes
	}
	return 0
}

func (x *EnrichedFlow) GetFINFlagCount() uint64 {
	if x != nil {
		return x.FINFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetSYNFlagCount() uint64 {
	if x != nil {
		return x.SYNFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetRSTFlagCount() uint64 {
	if x != nil {
		return x.RSTFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetPSHFlagCount() uint64 {
	if x != nil {
		return x.PSHFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetACKFlagCount() uint64 {
	if x != nil {
		return x.ACKFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetURGFlagCount() uint64 {
	if x != nil {
		return x.URGFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetCWRFlagCount() uint64 {
	if x != nil {
		return x.CWRFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetECEFlagCount() uint64 {
	if x != nil {
		return x.ECEFlagCount
	}
	return 0
}

func (x *EnrichedFlow) GetPayloadPackets() uint64 {
	if x != nil {
		return x.PayloadPackets
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMin() uint64 {
	if x != nil {
		return x.TimeActiveMin
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMax() uint64 {
	if x != nil {
		return x.TimeActiveMax
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveMean() uint64 {
	if x != nil {
		return x.TimeActiveMean
	}
	return 0
}

func (x *EnrichedFlow) GetTimeActiveStdDev() uint64 {
	if x != nil {
		return x.TimeActiveStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMin() uint64 {
	if x != nil {
		return x.TimeIdleMin
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMax() uint64 {
	if x != nil {
		return x.TimeIdleMax
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleMean() uint64 {
	if x != nil {
		return x.TimeIdleMean
	}
	return 0
}

func (x *EnrichedFlow) GetTimeIdleStdDev() uint64 {
	if x != nil {
		return x.TimeIdleStdDev
	}
	return 0
}

func (x *EnrichedFlow) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *EnrichedFlow) GetCidString() string {
	if x != nil {
		return x.CidString
	}
	return ""
}

func (x *EnrichedFlow) GetSrcCid() uint32 {
	if x != nil {
		return x.SrcCid
	}
	return 0
}

func (x *EnrichedFlow) GetDstCid() uint32 {
	if x != nil {
		return x.DstCid
	}
	return 0
}

func (x *EnrichedFlow) GetSrcAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SrcAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetDstAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.DstAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetPreservedPrefixLen() uint32 {
	if x != nil {
		return x.PreservedPrefixLen
	}
	return 0
}

func (x *EnrichedFlow) GetSamplerAddrAnon() EnrichedFlow_AnonymizedType {
	if x != nil {
		return x.SamplerAddrAnon
	}
	return EnrichedFlow_NotAnonymized
}

func (x *EnrichedFlow) GetSamplerAddrAnonPreservedPrefixLen() uint32 {
	if x != nil {
		return x.SamplerAddrAnonPreservedPrefixLen
	}
	return 0
}

func (x *EnrichedFlow) GetSrcASPath() []uint32 {
	if x != nil {
		return x.SrcASPath
	}
	return nil
}

func (x *EnrichedFlow) GetDstASPath() []uint32 {
	if x != nil {
		return x.DstASPath
	}
	return nil
}

func (x *EnrichedFlow) GetRemoteCountry() string {
	if x != nil {
		return x.RemoteCountry
	}
	return ""
}

func (x *EnrichedFlow) GetSrcCountry() string {
	if x != nil {
		return x.SrcCountry
	}
	return ""
}

func (x *EnrichedFlow) GetDstCountry() string {
	if x != nil {
		return x.DstCountry
	}
	return ""
}

func (x *EnrichedFlow) GetNormalized() EnrichedFlow_NormalizedType {
	if x != nil {
		return x.Normalized
	}
	return EnrichedFlow_No
}

func (x *EnrichedFlow) GetProtoName() string {
	if x != nil {
		return x.ProtoName
	}
	return ""
}

func (x *EnrichedFlow) GetRemoteAddr() EnrichedFlow_RemoteAddrType {
	if x != nil {
		return x.RemoteAddr
	}
	return EnrichedFlow_Neither
}

func (x *EnrichedFlow) GetSrcAddrName() string {
	if x != nil {
		return x.SrcAddrName
	}
	return ""
}

func (x *EnrichedFlow) GetDstAddrName() string {
	if x != nil {
		return x.DstAddrName
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfName() string {
	if x != nil {
		return x.SrcIfName
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfDesc() string {
	if x != nil {
		return x.SrcIfDesc
	}
	return ""
}

func (x *EnrichedFlow) GetSrcIfSpeed() uint32 {
	if x != nil {
		return x.SrcIfSpeed
	}
	return 0
}

func (x *EnrichedFlow) GetDstIfName() string {
	if x != nil {
		return x.DstIfName
	}
	return ""
}

func (x *EnrichedFlow) GetDstIfDesc() string {
	if x != nil {
		return x.DstIfDesc
	}
	return ""
}

func (x *EnrichedFlow) GetDstIfSpeed() uint32 {
	if x != nil {
		return x.DstIfSpeed
	}
	return 0
}

func (x *EnrichedFlow) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

var File_flow_proto protoreflect.FileDescriptor

var file_flow_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x66, 0x6c,
	0x6f, 0x77, 0x70, 0x62, 0x1a, 0x0c, 0x67, 0x6f, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe2, 0x11, 0x0a, 0x0c, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46,
	0x6c, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x04, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x27, 0x0a, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x69, 0x6e, 0x18, 0xcc,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x69, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x18, 0xcd, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x29,
	0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x61,
	0x6e, 0x18, 0xce, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x11, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xcf,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x18, 0xd6, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x69, 0x6e, 0x12, 0x23, 0x0a,
	0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x61, 0x78, 0x18, 0xd7, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d,
	0x61, 0x78, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x4d,
	0x65, 0x61, 0x6e, 0x18, 0xd8, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x41, 0x54, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0xd9, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x41, 0x54, 0x53, 0x74,
	0x64, 0x44, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0xe0, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x46, 0x49, 0x4e, 0x46, 0x6c,
	0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xea, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c,
	0x46, 0x49, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x53, 0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xeb, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x53, 0x59, 0x4e, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x52, 0x53, 0x54, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0xec, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x52, 0x53, 0x54, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x50, 0x53, 0x48, 0x46, 0x6c, 0x61,
	0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xed, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x50,
	0x53, 0x48, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x41,
	0x43, 0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xee, 0x08, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x41, 0x43, 0x4b, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0xef, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x55, 0x52, 0x47, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x43, 0x57, 0x52, 0x46, 0x6c, 0x61, 0x67,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf0, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x43, 0x57,
	0x52, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x45, 0x43,
	0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf1, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x45, 0x43, 0x45, 0x46, 0x6c, 0x61, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x18, 0xf4, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0xfe, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x25, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78,
	0x18, 0xff, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x18, 0x80, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x12,
	0x2b, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x64,
	0x44, 0x65, 0x76, 0x18, 0x81, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x54, 0x69, 0x6d, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x12, 0x21, 0x0a, 0x0b,
	0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x82, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x69, 0x6e, 0x12,
	0x21, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x83,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d,
	0x61, 0x78, 0x12, 0x23, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x4d, 0x65,
	0x61, 0x6e, 0x18, 0x84, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x6c, 0x65, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x64, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76, 0x18, 0x85, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x64, 0x44, 0x65, 0x76,
	0x12, 0x11, 0x0a, 0x03, 0x43, 0x69, 0x64, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x43, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x69, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x17, 0x0a, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x18, 0xf4, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x06, 0x53, 0x72, 0x63, 0x43, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x06, 0x44,
	0x73, 0x74, 0x43, 0x69, 0x64, 0x18, 0xf5, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x73,
	0x74, 0x43, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x41,
	0x6e, 0x6f, 0x6e, 0x18, 0x88, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f,
	0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0b,
	0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0x89, 0x09, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69,
	0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69,
	0x7a, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x8a, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x4e, 0x0a, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x18, 0x8b, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68, 0x65,
	0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x21, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x41, 0x6e, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x18, 0x8c, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x21, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x41, 0x6e,
	0x6f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x53, 0x72, 0x63, 0x41, 0x53, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x92, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x72, 0x63, 0x41, 0x53, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73, 0x74, 0x41, 0x53, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x93, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x44, 0x73, 0x74, 0x41, 0x53, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0xf2, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x72, 0x63,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf6, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x53, 0x72, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x73,
	0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xf7, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x44, 0x0a, 0x0a, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0xea, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45, 0x6e, 0x72, 0x69, 0x63, 0x68,
	0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xf1,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x44, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x18, 0xf3,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x70, 0x62, 0x2e, 0x45,
	0x6e, 0x72, 0x69, 0x63, 0x68, 0x65, 0x64, 0x46, 0x6c, 0x6f, 0x77, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x72, 0x63, 0x41, 0x64, 0x64,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9c, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x72,
	0x63, 0x41, 0x64, 0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x44, 0x73, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x9d, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09,
	0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xeb, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x53,
	0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xec, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x53, 0x72, 0x63, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x72,
	0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xed, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x53, 0x72, 0x63, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x44,
	0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xee, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x44, 0x73, 0x74, 0x49, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x44, 0x73,
	0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x18, 0xef, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x44, 0x73, 0x74, 0x49, 0x66, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x73, 0x74,
	0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0xf0, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x44, 0x73, 0x74, 0x49, 0x66, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x6f,
	0x74, 0x65, 0x18, 0xf8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x22,
	0x32, 0x0a, 0x0e, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x6f, 0x74, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x69, 0x7a,
	0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x41,
	0x4e, 0x10, 0x01, 0x22, 0x21, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4e, 0x6f, 0x10, 0x00, 0x12, 0x07, 0x0a,
	0x03, 0x59, 0x65, 0x73, 0x10, 0x01, 0x22, 0x2f, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x69, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x72, 0x63, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x44, 0x73, 0x74, 0x10, 0x02, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x77, 0x4e, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x2f,
	0x66, 0x6c, 0x6f, 0x77, 0x70, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x2f, 0x70, 0x62, 0x3b,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_proto_rawDescOnce sync.Once
	file_flow_proto_rawDescData = file_flow_proto_rawDesc
)

func file_flow_proto_rawDescGZIP() []byte {
	file_flow_proto_rawDescOnce.Do(func() {
		file_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_proto_rawDescData)
	})
	return file_flow_proto_rawDescData
}

var file_flow_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_flow_proto_goTypes = []interface{}{
	(EnrichedFlow_AnonymizedType)(0), // 0: flowpb.EnrichedFlow.AnonymizedType
	(EnrichedFlow_NormalizedType)(0), // 1: flowpb.EnrichedFlow.NormalizedType
	(EnrichedFlow_RemoteAddrType)(0), // 2: flowpb.EnrichedFlow.RemoteAddrType
	(*EnrichedFlow)(nil),             // 3: flowpb.EnrichedFlow
	(*pb.FlowMessage)(nil),           // 4: flowpb.FlowMessage
}
var file_flow_proto_depIdxs = []int32{
	4, // 0: flowpb.EnrichedFlow.Core:type_name -> flowpb.FlowMessage
	0, // 1: flowpb.EnrichedFlow.SrcAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	0, // 2: flowpb.EnrichedFlow.DstAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	0, // 3: flowpb.EnrichedFlow.SamplerAddrAnon:type_name -> flowpb.EnrichedFlow.AnonymizedType
	1, // 4: flowpb.EnrichedFlow.Normalized:type_name -> flowpb.EnrichedFlow.NormalizedType
	2, // 5: flowpb.EnrichedFlow.RemoteAddr:type_name -> flowpb.EnrichedFlow.RemoteAddrType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_flow_proto_init() }
func file_flow_proto_init() {
	if File_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrichedFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flow_proto_goTypes,
		DependencyIndexes: file_flow_proto_depIdxs,
		EnumInfos:         file_flow_proto_enumTypes,
		MessageInfos:      file_flow_proto_msgTypes,
	}.Build()
	File_flow_proto = out.File
	file_flow_proto_rawDesc = nil
	file_flow_proto_goTypes = nil
	file_flow_proto_depIdxs = nil
}
